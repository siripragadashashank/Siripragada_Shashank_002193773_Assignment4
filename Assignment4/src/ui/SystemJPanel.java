/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.System;
import model.Community;
import model.City;
import model.Person;
import model.Encounter;
import model.House;
import model.Patient;
import model.SampleData;
/**
 *
 * @author sirip
 */
public class SystemJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SystemJPanel
     */
    private System system;
    private City city;
    private JPanel displayJPanel;
    
    public SystemJPanel(JPanel displayJPanel, System system) {
        this.displayJPanel = displayJPanel;
        this.system = system;    
        initComponents();
//        initializeData();
        populateTable();
    }
//    private void initializeData() {
//        system = SampleData.initData();
//    }
    public void populateTable() {
        
        DefaultTableModel model = (DefaultTableModel) tblCity.getModel();
        model.setRowCount(0);
        for(City city:system.getCities()) {
            Object[] row = new Object[1];
            
            row[0]=city;

            model.addRow(row);
        }

           
    }    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSystemHeading = new javax.swing.JLabel();
        btnSystemNext = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCity = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();
        viewJButton = new javax.swing.JButton();
        addJButton = new javax.swing.JButton();

        lblSystemHeading.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblSystemHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSystemHeading.setText("Tracking System");

        btnSystemNext.setText("Next");
        btnSystemNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSystemNextActionPerformed(evt);
            }
        });

        tblCity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Cities"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCity);

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        deleteJButton.setText("Delete City");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        viewJButton.setText("View/Update City");
        viewJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewJButtonActionPerformed(evt);
            }
        });

        addJButton.setText("Add City");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(112, 112, 112)
                        .addComponent(lblSystemHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(268, 268, 268)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSystemNext)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(addJButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(viewJButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(deleteJButton)))))
                .addGap(223, 223, 223))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSystemHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backJButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addJButton)
                        .addGap(18, 18, 18)
                        .addComponent(viewJButton)
                        .addGap(18, 18, 18)
                        .addComponent(deleteJButton)))
                .addGap(18, 18, 18)
                .addComponent(btnSystemNext)
                .addContainerGap(155, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSystemNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSystemNextActionPerformed
        // TODO add your handling code here:

        
        int selectedRow = tblCity.getSelectedRow();
        if(selectedRow <0){
            JOptionPane.showMessageDialog(this, "Please Select a City to View the Communities");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblCity.getModel();
        City city = (City) model.getValueAt(selectedRow, 0);
        CommunityJPanel communityJPanel = new CommunityJPanel(displayJPanel, system, city);
        displayJPanel.add("CommunityPanel", communityJPanel);
        CardLayout layout = (CardLayout) displayJPanel.getLayout();
        layout.next(displayJPanel);
        
        
    }//GEN-LAST:event_btnSystemNextActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        displayJPanel.remove(this);
        CardLayout cardLayout =  (CardLayout) displayJPanel.getLayout();
        cardLayout.previous(displayJPanel);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblCity.getSelectedRow();
        if(selectedRow <0){
            JOptionPane.showMessageDialog(this, "Please Select any City to delete");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblCity.getModel();
        Community community = (Community) model.getValueAt(selectedRow, 0);

        ArrayList<Person> personsToRemove = new ArrayList<>();
        ArrayList<House> houses = community.getCommunityHouses();
        for(House house:houses) {
            personsToRemove.addAll(house.getPersons());
        }
        ArrayList<Patient> patientsToRemove = new ArrayList<>();
        for(Person person:personsToRemove) {
            patientsToRemove.add(person.getPatient());
        }

        system.getPersonDirectory().getPersonList().removeAll(personsToRemove);
        system.getPatientDirectory().getPatientList().removeAll(patientsToRemove);

        city.getCommunities().remove(community);

        JOptionPane.showMessageDialog(this, "Successfully deleted the City");
        populateTable();
    }//GEN-LAST:event_deleteJButtonActionPerformed

    private void viewJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCity.getSelectedRow();
        if(selectedRow <0){
            JOptionPane.showMessageDialog(this, "Please Select any City.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblCity.getModel();
        City city = (City) model.getValueAt(selectedRow, 0);
        ViewCityJPanel viewCityJPanel = new ViewCityJPanel(displayJPanel, system, city);
        displayJPanel.add("ViewCityPanel", viewCityJPanel);
        CardLayout cardLayout = (CardLayout) displayJPanel.getLayout();
        cardLayout.next(displayJPanel);
    }//GEN-LAST:event_viewJButtonActionPerformed

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
        // TODO add your handling code here:
        AddCityJPanel addCityJPanel = new AddCityJPanel(displayJPanel, system);
        displayJPanel.add("AddCityScreen", addCityJPanel);
        CardLayout cardLayout = (CardLayout) displayJPanel.getLayout();
        cardLayout.next(displayJPanel);
    }//GEN-LAST:event_addJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnSystemNext;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSystemHeading;
    private javax.swing.JTable tblCity;
    private javax.swing.JButton viewJButton;
    // End of variables declaration//GEN-END:variables
}
